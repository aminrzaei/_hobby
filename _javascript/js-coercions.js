// Cool Errors
//------------------------------------------------------------
// #variable // -> Errors
// @variable // -> Errors
// $variable // -> OK
// _variable // -> OK
// JS is Case Sensetive in variables

//------------------------------------------------------------
+'2' + // -> 2
  '' - // -> 0
  '5' - // -> -5
  '-1'; // -> 1

//------------------------------------------------------------
'b' + 'a' + +'a' + 'a'; // -> baNaNa

[] == ![]; // -> true

typeof NaN; // -> 'number'
console.log(0 / 0); // -> NaN
NaN === NaN; // -> false
NaN == NaN; // -> false

//------------------------------------------------------------
// null
typeof []; // -> 'object'
typeof null; // -> 'object'
// however
null instanceof Object; // -> false

//------------------------------------------------------------
// To Avoid mistakes use this method
Object.prototype.toString.call(null); // -> '[object Null]'

//------------------------------------------------------------
[] == true; // -> false
null == false; // -> false

//------------------------------------------------------------
0 == false; // -> true
'' == false; // -> true

//------------------------------------------------------------
// Number.MIN_VALUE = 5e-324
Number.MIN_VALUE >
  (0)[ // -> true
    //------------------------------------------------------------
    (1, 2, 3)
  ] +
    [4, 5, 6]; // -> [1, 2, 3] + [4, 5, 6]
// becuase first convert them to string
'1,2,3' + '4,5,6'; // -> "1,2,34,5,6"

//------------------------------------------------------------
let a = [1, 2, , ,];
a.length; // -> 4
a.toString(); // -> ‘1,2,,’
// javascript ignore last camma

//------------------------------------------------------------
[] == ''; // -> true
(((((((((((((((([] == (0)['']) == // -> true
  ''[0]) == // -> true
  (0)[0]) == // -> true
  ''['']) == // -> false
  (0)[null]) == // -> true
  ''[null]) == // true
  (0)[undefined]) == // true
  ''[undefined]) == // true
  (0)[[]]) == // true
  (0)[[]]) == // true
  ''[[[[[[]]]]]]) == // true
  ''[[[[[[]]]]]]) == // true
  (0)[[[[[[null]]]]]]) == // true
  (0)[[[[[[null]]]]]]) == // true
  ''[[[[[[undefined]]]]]]) == // true
  (0)[[[[[[undefined]]]]]]) == // true
  ''; // true

//------------------------------------------------------------
Number(); // -> 0
Number(null); // -> 0
Number(undefined) + // -> NaN
  // Number() make argument ToNumber
  // And undefiend ToNumber is NaN

  //------------------------------------------------------------
  true + // -> 1
  false - // -> 0
  true - // -> -1
  false; // -> -0

//------------------------------------------------------------
9999999999999999; // -> 10000000000000000
10000000000000000 + 1; // -> 10000000000000000
10000000000000000 + 1.1; // -> 10000000000000002

//------------------------------------------------------------
let precision = 0.1 + 0.2; // -> 0.30000000000000004
precision === 0.3; // -> false

//------------------------------------------------------------
1 < 2 < 3; // -> true
3 > 2 > 1; // -> false

//------------------------------------------------------------
3 - 1; // -> 2
3 + 1; // -> 4
'3' - 1; // -> 2
'3' + 1; // -> ‘31’!
'' + ''; // -> ''
[] + []; // -> ''
+[]; // -> 0
[] + {}; // -> ‘[object Object]’!
+{}; // -> ‘[object Object][object Object]’!!
'222' -
  -'111'[4] * // -> 333!
    [4]; // -> 16
[] *
  [][(4, 4)] * // -> 0
  [4, 4]// Boolean + Boolean -> addition // Boolean + Number -> addition // Number + Number -> addition // Rules //------------------------------------------------------------ // NaN
  // Number + String -> concatenation
  // String + Boolean -> concatenation
  // String + String -> concatenation

  //------------------------------------------------------------
  `${{ Object }}`; // -> "[object Object]";

//------------------------------------------------------------
foo: {
  console.log('first');
  break foo;
  console.log('second');
}
// > first
// -> undefined

//------------------------------------------------------------
